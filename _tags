# OASIS_START
# DO NOT EDIT (digest: d36a6109f980f11580af5d080db3fb98)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library email_message
"lib/email_message/email_message.cmxs": use_email_message
"lib/email_message/bigstringable.cmx": for-pack(Email_message)
"lib/email_message/bigstring_extended.cmx": for-pack(Email_message)
"lib/email_message/boundary.cmx": for-pack(Email_message)
"lib/email_message/core_replace.cmx": for-pack(Email_message)
"lib/email_message/debug.cmx": for-pack(Email_message)
"lib/email_message/email.cmx": for-pack(Email_message)
"lib/email_message/email_regex.cmx": for-pack(Email_message)
"lib/email_message/encoding.cmx": for-pack(Email_message)
"lib/email_message/error_handling.cmx": for-pack(Email_message)
"lib/email_message/field_name.cmx": for-pack(Email_message)
"lib/email_message/grammar.cmx": for-pack(Email_message)
"lib/email_message/grammar_types.cmx": for-pack(Email_message)
"lib/email_message/header.cmx": for-pack(Email_message)
"lib/email_message/lazys.cmx": for-pack(Email_message)
"lib/email_message/lexable.cmx": for-pack(Email_message)
"lib/email_message/lexer.cmx": for-pack(Email_message)
"lib/email_message/lexer_state.cmx": for-pack(Email_message)
"lib/email_message/mailbox.cmx": for-pack(Email_message)
"lib/email_message/media_type.cmx": for-pack(Email_message)
"lib/email_message/mimestring.cmx": for-pack(Email_message)
"lib/email_message/octet_stream.cmx": for-pack(Email_message)
"lib/email_message/parser_intf.cmx": for-pack(Email_message)
"lib/email_message/rfc.cmx": for-pack(Email_message)
"lib/email_message/stringable_.cmx": for-pack(Email_message)
"lib/email_message/string_monoidable.cmx": for-pack(Email_message)
"lib/email_message/string_monoid.cmx": for-pack(Email_message)
<lib/email_message/*.ml{,i,y}>: pkg_fieldslib.syntax
<lib/email_message/*.ml{,i,y}>: pkg_re2
<lib/email_message/*.ml{,i,y}>: pkg_sexplib.syntax
<lib/email_message/*.ml{,i,y}>: pkg_str
<lib/email_message/*.ml{,i,y}>: pkg_threads
# Executable parse_restore
"test/parse_restore.native": pkg_cstruct.unix
"test/parse_restore.native": pkg_fieldslib.syntax
"test/parse_restore.native": pkg_irmin.unix
"test/parse_restore.native": pkg_lwt
"test/parse_restore.native": pkg_lwt.syntax
"test/parse_restore.native": pkg_lwt.unix
"test/parse_restore.native": pkg_nocrypto
"test/parse_restore.native": pkg_re2
"test/parse_restore.native": pkg_sexplib.syntax
"test/parse_restore.native": pkg_str
"test/parse_restore.native": pkg_threads
"test/parse_restore.native": pkg_tls.lwt
"test/parse_restore.native": use_email_message
<test/*.ml{,i,y}>: pkg_cstruct.unix
<test/*.ml{,i,y}>: pkg_fieldslib.syntax
<test/*.ml{,i,y}>: pkg_irmin.unix
<test/*.ml{,i,y}>: pkg_lwt
<test/*.ml{,i,y}>: pkg_lwt.syntax
<test/*.ml{,i,y}>: pkg_lwt.unix
<test/*.ml{,i,y}>: pkg_nocrypto
<test/*.ml{,i,y}>: pkg_re2
<test/*.ml{,i,y}>: pkg_sexplib.syntax
<test/*.ml{,i,y}>: pkg_str
<test/*.ml{,i,y}>: pkg_threads
<test/*.ml{,i,y}>: pkg_tls.lwt
<test/*.ml{,i,y}>: use_email_message
# Executable imaplet
"imaplet.native": pkg_cstruct.unix
"imaplet.native": pkg_fieldslib.syntax
"imaplet.native": pkg_irmin.unix
"imaplet.native": pkg_lwt
"imaplet.native": pkg_lwt.syntax
"imaplet.native": pkg_lwt.unix
"imaplet.native": pkg_nocrypto
"imaplet.native": pkg_re2
"imaplet.native": pkg_sexplib.syntax
"imaplet.native": pkg_str
"imaplet.native": pkg_threads
"imaplet.native": pkg_tls.lwt
"imaplet.native": use_email_message
<*.ml{,i,y}>: pkg_cstruct.unix
<*.ml{,i,y}>: pkg_tls.lwt
# Executable imaplet_lmtp
"imaplet_lmtp.native": pkg_lwt
"imaplet_lmtp.native": pkg_lwt.syntax
"imaplet_lmtp.native": pkg_lwt.unix
"imaplet_lmtp.native": pkg_sexplib.syntax
"imaplet_lmtp.native": pkg_str
"imaplet_lmtp.native": pkg_threads
<*.ml{,i,y}>: pkg_lwt.syntax
# Executable imaplet_irmin_read
"imaplet_irmin_read.native": pkg_fieldslib.syntax
"imaplet_irmin_read.native": pkg_irmin.unix
"imaplet_irmin_read.native": pkg_lwt
"imaplet_irmin_read.native": pkg_nocrypto
"imaplet_irmin_read.native": pkg_re2
"imaplet_irmin_read.native": pkg_sexplib.syntax
"imaplet_irmin_read.native": pkg_str
"imaplet_irmin_read.native": pkg_threads
"imaplet_irmin_read.native": use_email_message
# Executable imaplet_irmin_build
"imaplet_irmin_build.native": pkg_fieldslib.syntax
"imaplet_irmin_build.native": pkg_irmin.unix
"imaplet_irmin_build.native": pkg_lwt
"imaplet_irmin_build.native": pkg_lwt.unix
"imaplet_irmin_build.native": pkg_nocrypto
"imaplet_irmin_build.native": pkg_re2
"imaplet_irmin_build.native": pkg_sexplib.syntax
"imaplet_irmin_build.native": pkg_str
"imaplet_irmin_build.native": pkg_threads
"imaplet_irmin_build.native": use_email_message
<*.ml{,i,y}>: pkg_irmin.unix
<*.ml{,i,y}>: pkg_nocrypto
# Executable imaplet_maildir_index
"imaplet_maildir_index.native": pkg_fieldslib.syntax
"imaplet_maildir_index.native": pkg_lwt
"imaplet_maildir_index.native": pkg_lwt.unix
"imaplet_maildir_index.native": pkg_re2
"imaplet_maildir_index.native": pkg_sexplib.syntax
"imaplet_maildir_index.native": pkg_str
"imaplet_maildir_index.native": pkg_threads
"imaplet_maildir_index.native": use_email_message
<*.ml{,i,y}>: pkg_fieldslib.syntax
<*.ml{,i,y}>: pkg_lwt
<*.ml{,i,y}>: pkg_lwt.unix
<*.ml{,i,y}>: pkg_re2
<*.ml{,i,y}>: pkg_sexplib.syntax
<*.ml{,i,y}>: pkg_str
<*.ml{,i,y}>: pkg_threads
<*.ml{,i,y}>: use_email_message
# OASIS_STOP
true: use_menhir
<storage/*.ml{,i}>: pkg_cstruct.unix
<storage/*.ml{,i}>: pkg_lwt
<storage/*.ml{,i}>: pkg_lwt.syntax
<storage/*.ml{,i}>: pkg_lwt.unix
<storage/*.ml{,i}>: pkg_sexplib
<storage/*.ml{,i}>: pkg_sexplib.syntax
<storage/*.ml{,i}>: pkg_str
<storage/*.ml{,i}>: pkg_threads
<storage/*.ml{,i}>: pkg_tls.lwt
<storage/*.ml{,i}>: pkg_irmin.unix
<storage/*.ml{,i}>: use_email_message
