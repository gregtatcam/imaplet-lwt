# OASIS_START
# DO NOT EDIT (digest: e8dba0de2e0eff4623acb14dce8279c4)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library parsemail
"lib/parsemail/parsemail.cmxs": use_parsemail
"lib/parsemail/bigstringable.cmx": for-pack(Parsemail)
"lib/parsemail/bigstring_extended.cmx": for-pack(Parsemail)
"lib/parsemail/boundary.cmx": for-pack(Parsemail)
"lib/parsemail/core_replace.cmx": for-pack(Parsemail)
"lib/parsemail/debug.cmx": for-pack(Parsemail)
"lib/parsemail/email.cmx": for-pack(Parsemail)
"lib/parsemail/email_regex.cmx": for-pack(Parsemail)
"lib/parsemail/encoding.cmx": for-pack(Parsemail)
"lib/parsemail/error_handling.cmx": for-pack(Parsemail)
"lib/parsemail/field_name.cmx": for-pack(Parsemail)
"lib/parsemail/grammar.cmx": for-pack(Parsemail)
"lib/parsemail/grammar_types.cmx": for-pack(Parsemail)
"lib/parsemail/header.cmx": for-pack(Parsemail)
"lib/parsemail/lazys.cmx": for-pack(Parsemail)
"lib/parsemail/lexable.cmx": for-pack(Parsemail)
"lib/parsemail/lexer.cmx": for-pack(Parsemail)
"lib/parsemail/lexer_state.cmx": for-pack(Parsemail)
"lib/parsemail/mailbox.cmx": for-pack(Parsemail)
"lib/parsemail/media_type.cmx": for-pack(Parsemail)
"lib/parsemail/mimestring.cmx": for-pack(Parsemail)
"lib/parsemail/octet_stream.cmx": for-pack(Parsemail)
"lib/parsemail/parser_intf.cmx": for-pack(Parsemail)
"lib/parsemail/rfc.cmx": for-pack(Parsemail)
"lib/parsemail/stringable_.cmx": for-pack(Parsemail)
"lib/parsemail/string_monoidable.cmx": for-pack(Parsemail)
"lib/parsemail/string_monoid.cmx": for-pack(Parsemail)
<lib/parsemail/*.ml{,i,y}>: pkg_fieldslib.syntax
<lib/parsemail/*.ml{,i,y}>: pkg_re
<lib/parsemail/*.ml{,i,y}>: pkg_re.posix
<lib/parsemail/*.ml{,i,y}>: pkg_sexplib.syntax
<lib/parsemail/*.ml{,i,y}>: pkg_str
<lib/parsemail/*.ml{,i,y}>: pkg_threads
# Library commands
"lib/commands/commands.cmxs": use_commands
"lib/commands/account.cmx": for-pack(Commands)
"lib/commands/amailbox.cmx": for-pack(Commands)
"lib/commands/configuration.cmx": for-pack(Commands)
"lib/commands/connections.cmx": for-pack(Commands)
"lib/commands/context.cmx": for-pack(Commands)
"lib/commands/dates.cmx": for-pack(Commands)
"lib/commands/email_parse.cmx": for-pack(Commands)
"lib/commands/fetchregex.cmx": for-pack(Commands)
"lib/commands/imap_cmd.cmx": for-pack(Commands)
"lib/commands/imap_crypto.cmx": for-pack(Commands)
"lib/commands/imaplet_types.cmx": for-pack(Commands)
"lib/commands/irmin_core.cmx": for-pack(Commands)
"lib/commands/irmin_storage.cmx": for-pack(Commands)
"lib/commands/install.cmx": for-pack(Commands)
"lib/commands/interpreter.cmx": for-pack(Commands)
"lib/commands/lazy_message.cmx": for-pack(Commands)
"lib/commands/lex.cmx": for-pack(Commands)
"lib/commands/mailbox_storage.cmx": for-pack(Commands)
"lib/commands/maildir_storage.cmx": for-pack(Commands)
"lib/commands/parser.cmx": for-pack(Commands)
"lib/commands/regex.cmx": for-pack(Commands)
"lib/commands/response.cmx": for-pack(Commands)
"lib/commands/seq_iterator.cmx": for-pack(Commands)
"lib/commands/server_config.cmx": for-pack(Commands)
"lib/commands/ssl_.cmx": for-pack(Commands)
"lib/commands/storage.cmx": for-pack(Commands)
"lib/commands/storage_meta.cmx": for-pack(Commands)
"lib/commands/utils.cmx": for-pack(Commands)
<lib/commands/*.ml{,i,y}>: pkg_cstruct.unix
<lib/commands/*.ml{,i,y}>: pkg_fieldslib.syntax
<lib/commands/*.ml{,i,y}>: pkg_irmin.unix
<lib/commands/*.ml{,i,y}>: pkg_lwt
<lib/commands/*.ml{,i,y}>: pkg_lwt.syntax
<lib/commands/*.ml{,i,y}>: pkg_lwt.unix
<lib/commands/*.ml{,i,y}>: pkg_nocrypto
<lib/commands/*.ml{,i,y}>: pkg_re
<lib/commands/*.ml{,i,y}>: pkg_re.posix
<lib/commands/*.ml{,i,y}>: pkg_sexplib.syntax
<lib/commands/*.ml{,i,y}>: pkg_str
<lib/commands/*.ml{,i,y}>: pkg_threads
<lib/commands/*.ml{,i,y}>: pkg_tls.lwt
<lib/commands/*.ml{,i,y}>: use_parsemail
# Library imaplet
"lib/imaplet.cmxs": use_imaplet
"lib/server.cmx": for-pack(Imaplet)
<lib/*.ml{,i,y}>: pkg_cstruct.unix
<lib/*.ml{,i,y}>: pkg_fieldslib.syntax
<lib/*.ml{,i,y}>: pkg_irmin.unix
<lib/*.ml{,i,y}>: pkg_lwt
<lib/*.ml{,i,y}>: pkg_lwt.syntax
<lib/*.ml{,i,y}>: pkg_lwt.unix
<lib/*.ml{,i,y}>: pkg_nocrypto
<lib/*.ml{,i,y}>: pkg_re
<lib/*.ml{,i,y}>: pkg_re.posix
<lib/*.ml{,i,y}>: pkg_sexplib.syntax
<lib/*.ml{,i,y}>: pkg_str
<lib/*.ml{,i,y}>: pkg_threads
<lib/*.ml{,i,y}>: pkg_tls.lwt
<lib/*.ml{,i,y}>: use_commands
<lib/*.ml{,i,y}>: use_parsemail
# Executable parse_restore
"test/parse_restore.native": pkg_cstruct.unix
"test/parse_restore.native": pkg_fieldslib.syntax
"test/parse_restore.native": pkg_irmin.unix
"test/parse_restore.native": pkg_lwt
"test/parse_restore.native": pkg_lwt.syntax
"test/parse_restore.native": pkg_lwt.unix
"test/parse_restore.native": pkg_nocrypto
"test/parse_restore.native": pkg_re
"test/parse_restore.native": pkg_re.posix
"test/parse_restore.native": pkg_sexplib.syntax
"test/parse_restore.native": pkg_str
"test/parse_restore.native": pkg_threads
"test/parse_restore.native": pkg_tls.lwt
"test/parse_restore.native": use_commands
"test/parse_restore.native": use_imaplet
"test/parse_restore.native": use_parsemail
<test/*.ml{,i,y}>: pkg_cstruct.unix
<test/*.ml{,i,y}>: pkg_fieldslib.syntax
<test/*.ml{,i,y}>: pkg_irmin.unix
<test/*.ml{,i,y}>: pkg_lwt
<test/*.ml{,i,y}>: pkg_lwt.syntax
<test/*.ml{,i,y}>: pkg_lwt.unix
<test/*.ml{,i,y}>: pkg_nocrypto
<test/*.ml{,i,y}>: pkg_re
<test/*.ml{,i,y}>: pkg_re.posix
<test/*.ml{,i,y}>: pkg_sexplib.syntax
<test/*.ml{,i,y}>: pkg_str
<test/*.ml{,i,y}>: pkg_threads
<test/*.ml{,i,y}>: pkg_tls.lwt
<test/*.ml{,i,y}>: use_commands
<test/*.ml{,i,y}>: use_imaplet
<test/*.ml{,i,y}>: use_parsemail
# Executable imaplet
"servers/imaplet_server.native": pkg_cstruct.unix
"servers/imaplet_server.native": pkg_fieldslib.syntax
"servers/imaplet_server.native": pkg_irmin.unix
"servers/imaplet_server.native": pkg_lwt
"servers/imaplet_server.native": pkg_lwt.syntax
"servers/imaplet_server.native": pkg_lwt.unix
"servers/imaplet_server.native": pkg_nocrypto
"servers/imaplet_server.native": pkg_re
"servers/imaplet_server.native": pkg_re.posix
"servers/imaplet_server.native": pkg_sexplib.syntax
"servers/imaplet_server.native": pkg_str
"servers/imaplet_server.native": pkg_threads
"servers/imaplet_server.native": pkg_tls.lwt
"servers/imaplet_server.native": use_commands
"servers/imaplet_server.native": use_imaplet
"servers/imaplet_server.native": use_parsemail
# Executable imaplet_lmtp
"servers/imaplet_lmtp.native": pkg_cstruct.unix
"servers/imaplet_lmtp.native": pkg_fieldslib.syntax
"servers/imaplet_lmtp.native": pkg_irmin.unix
"servers/imaplet_lmtp.native": pkg_lwt
"servers/imaplet_lmtp.native": pkg_lwt.syntax
"servers/imaplet_lmtp.native": pkg_lwt.unix
"servers/imaplet_lmtp.native": pkg_nocrypto
"servers/imaplet_lmtp.native": pkg_re
"servers/imaplet_lmtp.native": pkg_re.posix
"servers/imaplet_lmtp.native": pkg_sexplib.syntax
"servers/imaplet_lmtp.native": pkg_str
"servers/imaplet_lmtp.native": pkg_threads
"servers/imaplet_lmtp.native": pkg_tls.lwt
"servers/imaplet_lmtp.native": use_commands
"servers/imaplet_lmtp.native": use_imaplet
"servers/imaplet_lmtp.native": use_parsemail
<servers/*.ml{,i,y}>: use_imaplet
# Executable imaplet_irmin_read
"servers/imaplet_irmin_read.native": pkg_cstruct.unix
"servers/imaplet_irmin_read.native": pkg_fieldslib.syntax
"servers/imaplet_irmin_read.native": pkg_irmin.unix
"servers/imaplet_irmin_read.native": pkg_lwt
"servers/imaplet_irmin_read.native": pkg_lwt.syntax
"servers/imaplet_irmin_read.native": pkg_lwt.unix
"servers/imaplet_irmin_read.native": pkg_nocrypto
"servers/imaplet_irmin_read.native": pkg_re
"servers/imaplet_irmin_read.native": pkg_re.posix
"servers/imaplet_irmin_read.native": pkg_sexplib.syntax
"servers/imaplet_irmin_read.native": pkg_str
"servers/imaplet_irmin_read.native": pkg_threads
"servers/imaplet_irmin_read.native": pkg_tls.lwt
"servers/imaplet_irmin_read.native": use_commands
"servers/imaplet_irmin_read.native": use_parsemail
# Executable imaplet_irmin_build
"servers/imaplet_irmin_build.native": pkg_cstruct.unix
"servers/imaplet_irmin_build.native": pkg_fieldslib.syntax
"servers/imaplet_irmin_build.native": pkg_irmin.unix
"servers/imaplet_irmin_build.native": pkg_lwt
"servers/imaplet_irmin_build.native": pkg_lwt.syntax
"servers/imaplet_irmin_build.native": pkg_lwt.unix
"servers/imaplet_irmin_build.native": pkg_nocrypto
"servers/imaplet_irmin_build.native": pkg_re
"servers/imaplet_irmin_build.native": pkg_re.posix
"servers/imaplet_irmin_build.native": pkg_sexplib.syntax
"servers/imaplet_irmin_build.native": pkg_str
"servers/imaplet_irmin_build.native": pkg_threads
"servers/imaplet_irmin_build.native": pkg_tls.lwt
"servers/imaplet_irmin_build.native": use_commands
"servers/imaplet_irmin_build.native": use_parsemail
# Executable imaplet_maildir_index
"servers/imaplet_maildir_index.native": pkg_cstruct.unix
"servers/imaplet_maildir_index.native": pkg_fieldslib.syntax
"servers/imaplet_maildir_index.native": pkg_irmin.unix
"servers/imaplet_maildir_index.native": pkg_lwt
"servers/imaplet_maildir_index.native": pkg_lwt.syntax
"servers/imaplet_maildir_index.native": pkg_lwt.unix
"servers/imaplet_maildir_index.native": pkg_nocrypto
"servers/imaplet_maildir_index.native": pkg_re
"servers/imaplet_maildir_index.native": pkg_re.posix
"servers/imaplet_maildir_index.native": pkg_sexplib.syntax
"servers/imaplet_maildir_index.native": pkg_str
"servers/imaplet_maildir_index.native": pkg_threads
"servers/imaplet_maildir_index.native": pkg_tls.lwt
"servers/imaplet_maildir_index.native": pkg_zip
"servers/imaplet_maildir_index.native": use_commands
"servers/imaplet_maildir_index.native": use_parsemail
<servers/*.ml{,i,y}>: pkg_cstruct.unix
<servers/*.ml{,i,y}>: pkg_fieldslib.syntax
<servers/*.ml{,i,y}>: pkg_irmin.unix
<servers/*.ml{,i,y}>: pkg_lwt
<servers/*.ml{,i,y}>: pkg_lwt.syntax
<servers/*.ml{,i,y}>: pkg_lwt.unix
<servers/*.ml{,i,y}>: pkg_nocrypto
<servers/*.ml{,i,y}>: pkg_re
<servers/*.ml{,i,y}>: pkg_re.posix
<servers/*.ml{,i,y}>: pkg_sexplib.syntax
<servers/*.ml{,i,y}>: pkg_str
<servers/*.ml{,i,y}>: pkg_threads
<servers/*.ml{,i,y}>: pkg_tls.lwt
<servers/*.ml{,i,y}>: pkg_zip
<servers/*.ml{,i,y}>: use_commands
<servers/*.ml{,i,y}>: use_parsemail
# OASIS_STOP
true: use_menhir
